import logging
import os
import requests
from geopy import distance
from moltin import MoltinClient
from dotenv import load_dotenv
from textwrap import dedent
from contextlib import suppress
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.constants import PARSEMODE_MARKDOWN_V2
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    PicklePersistence,
    PreCheckoutQueryHandler,
    Updater,
    Filters,
)

logger = logging.getLogger(__name__)

(
    START,
    HANDLE_MENU,
    HANDLE_PRODUCT,
    HANDLE_CART,
    AWAIT_LOCATION,
    HANDLE_DELIVERY,
    HANDLE_PAYMENT,
    HANDLE_FINISH
) = range(8)


def define_delivery_distance(pizzerias, client_longitude, client_latitude):
    for pizzeria in pizzerias:
        pizzeria['delivery_distance'] = distance.distance(
            (pizzeria['latitude'], pizzeria['longitude']),
            (client_latitude, client_longitude)
        ).km


def escape(s):
    return s.replace('-', '\-').replace('.', '\.').replace('(', '\(').replace(')', '\)')


def get_cart_summary(products, cost):
    if not products:
        return '–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ.'
    summary = ''
    for product in products:
        summary += f'''\
            *{product["name"]}* (_{product["description"]}_)
            {product["quantity"]} —à—Ç. –Ω–∞ —Å—É–º–º—É {product["total_cost"]}
            \n'''
    summary = dedent(summary) + f'*–ö –æ–ø–ª–∞—Ç–µ: {cost}*'
    return summary


def fetch_coordinates(apikey, address):
    base_url = 'https://geocode-maps.yandex.ru/1.x'
    response = requests.get(base_url, params={
        'geocode': address,
        'apikey': apikey,
        'format': 'json',
    })
    response.raise_for_status()
    found_places = response.json()['response']['GeoObjectCollection']['featureMember']

    if not found_places:
        return None

    most_relevant = found_places[0]
    lon, lat = most_relevant['GeoObject']['Point']['pos'].split(' ')
    return float(lon), float(lat)


def start(update, context):
    moltin_client = context.bot_data['moltin_client']
    products_per_page = context.bot_data['products_per_page']
    all_products = moltin_client.get_all_products()
    keyboard = []
    for product in all_products[0:products_per_page]:
        keyboard.append([InlineKeyboardButton(product['name'], callback_data=product['id'])])
    keyboard.append([InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data='page1')])
    update.message.reply_text(
        '–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return HANDLE_MENU


def show_menu(update, context):
    moltin_client = context.bot_data['moltin_client']
    products_per_page = context.bot_data['products_per_page']
    query = update.callback_query
    query.answer()
    page = 0
    if 'page' in query.data:
        page = int(query.data.replace('page', ''))
    all_products = moltin_client.get_all_products()
    keyboard = []
    for product in all_products[page * products_per_page:(page + 1) * products_per_page]:
        keyboard.append([InlineKeyboardButton(product['name'], callback_data=product['id'])])
    if page == 0:
        keyboard.append([InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data=f'page{page + 1}')])
    elif len(all_products) <= (page + 1) * products_per_page:
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data=f'page{page - 1}')])
    else:
        keyboard.append([
            InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data=f'page{page - 1}'),
            InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data=f'page{page + 1}')
        ])
    cart_products, _ = moltin_client.get_cart_data(query.from_user.id)
    if cart_products:
        keyboard.append([InlineKeyboardButton('üçï –ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart')])
    query.message.reply_text(
        '–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    query.message.delete()
    return HANDLE_MENU


def show_product(update, context):
    moltin_client = context.bot_data['moltin_client']
    query = update.callback_query
    if '+' in query.data:
        query.data = query.data.replace('+', '')
        with suppress(requests.exceptions.HTTPError):
            moltin_client.add_product_to_cart(query.data, 1, query.from_user.id)
        query.answer('–ü–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        query.answer()
        product = moltin_client.get_product(query.data)
        keyboard = []
        keyboard.append([
            InlineKeyboardButton('üí∞ –ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'+{product["id"]}'),
            InlineKeyboardButton('üçï –ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart'),
            InlineKeyboardButton('üî† –í –º–µ–Ω—é', callback_data='back')
        ])
        message = f'''\
                *{product["name"]} / {product["price"]}*

                _{product["description"]}_
                '''
        quantity_in_cart = moltin_client.get_product_quantity_in_cart(product['name'], query.from_user.id)
        if quantity_in_cart:
            message += f'''\

                –í –∫–æ—Ä–∑–∏–Ω–µ: *{quantity_in_cart} —à—Ç.*
                '''
        query.message.reply_photo(
            photo=product['image_url'],
            caption=escape(dedent(message)),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=PARSEMODE_MARKDOWN_V2
        )
        query.message.delete()
    return HANDLE_PRODUCT


def show_cart(update, context):
    moltin_client = context.bot_data['moltin_client']
    query = update.callback_query
    query.answer()
    if query.data != 'cart':
        moltin_client.remove_product_from_cart(query.data, query.from_user.id)
    cart_products, cart_cost = moltin_client.get_cart_data(query.from_user.id)
    keyboard = []
    if cart_products:
        keyboard.append([InlineKeyboardButton('üçï –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='pay')])
    for product in cart_products:
        keyboard.append(
            [InlineKeyboardButton(f'–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã {product["name"]}', callback_data=product['id'])]
        )
    keyboard.append([InlineKeyboardButton('üî† –í –º–µ–Ω—é', callback_data='back')])
    query.message.reply_text(
        escape(get_cart_summary(cart_products, cart_cost)),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=PARSEMODE_MARKDOWN_V2
    )
    query.message.delete()
    return HANDLE_CART


def ask_for_address(update, context):
    query = update.callback_query
    query.answer()
    query.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'
    )
    query.message.delete()
    return AWAIT_LOCATION


def handle_location(update, context, coordinates=None):
    moltin_client = context.bot_data['moltin_client']
    if coordinates:
        longitude, latitude = coordinates
    else:
        longitude, latitude = update.message.location.longitude, update.message.location.latitude
    moltin_client.add_entry_to_flow('customer_address', {
        'customer_telegram_id': update.message.from_user.id,
        'longitude': longitude,
        'latitude': latitude
    })
    pizzerias = moltin_client.get_pizzerias()
    define_delivery_distance(pizzerias, longitude, latitude)
    nearest_pizzeria = min(pizzerias, key=lambda p: p['delivery_distance'])
    context.user_data['nearest_pizzeria'] = nearest_pizzeria
    keyboard = []
    if nearest_pizzeria['delivery_distance'] <= 0.5:
        keyboard.append([
            InlineKeyboardButton('üö∂ –ó–∞–±–µ—Ä—É —Å–∞–º', callback_data='pickup'),
            InlineKeyboardButton('üö¥ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', callback_data='free_delivery')
        ])
        keyboard.append([InlineKeyboardButton('üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data='change_address')])
        update.message.reply_text(
            f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è –ø–æ –∞–¥—Ä–µ—Å—É {nearest_pizzeria["address"]} '
            f'–≤—Å–µ–≥–æ –≤ {nearest_pizzeria["delivery_distance"] * 1000:.0f} –º –æ—Ç –≤–∞—Å. '
            f'–ú–æ–∂–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif nearest_pizzeria['delivery_distance'] <= 5:
        keyboard.append([
            InlineKeyboardButton('üöó –ó–∞–±–µ—Ä—É —Å–∞–º', callback_data='pickup'),
            InlineKeyboardButton('üö¥ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 100 ‚ÇΩ', callback_data='paid_delivery_1')
        ])
        keyboard.append([InlineKeyboardButton('üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data='change_address')])
        update.message.reply_text(
            f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è –ø–æ –∞–¥—Ä–µ—Å—É {nearest_pizzeria["address"]} '
            f'–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {nearest_pizzeria["delivery_distance"]:.0f} –∫–º –æ—Ç –≤–∞—Å. '
            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif nearest_pizzeria['delivery_distance'] <= 20:
        keyboard.append([
            InlineKeyboardButton('üöó –ó–∞–±–µ—Ä—É —Å–∞–º', callback_data='pickup'),
            InlineKeyboardButton('üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 300 ‚ÇΩ', callback_data='paid_delivery_2')
        ])
        keyboard.append([InlineKeyboardButton('üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data='change_address')])
        update.message.reply_text(
            f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è –ø–æ –∞–¥—Ä–µ—Å—É {nearest_pizzeria["address"]} '
            f'–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {nearest_pizzeria["delivery_distance"]:.0f} –∫–º –æ—Ç –≤–∞—Å. '
            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard.append([
            InlineKeyboardButton('üöó –ó–∞–±–µ—Ä—É —Å–∞–º', callback_data='pickup'),
            InlineKeyboardButton('üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data='change_address')
        ])
        update.message.reply_text(
            f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {nearest_pizzeria["delivery_distance"]:.0f} –∫–º –æ—Ç –≤–∞—Å! '
            f'–ó–∞–±–µ—Ä—ë—Ç–µ –ø–∏—Ü—Ü—É —Å–∞–º–∏?',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return HANDLE_DELIVERY


def handle_address(update, context):
    yandex_geocoder_api_key = context.bot_data['yandex_geocoder_api_key']
    address = update.message.text
    try:
        coordinates = fetch_coordinates(yandex_geocoder_api_key, address)
    except requests.exceptions.RequestException:
        coordinates = None
    if not coordinates:
        update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.'
        )
        return AWAIT_LOCATION
    return handle_location(update, context, coordinates)


def handle_delivery(update, context):
    query = update.callback_query
    query.answer()
    context.user_data['delivery_type'] = 'pickup' if query.data == 'pickup' else query.data
    keyboard = []
    keyboard.append([InlineKeyboardButton('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay')])
    query.message.reply_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    query.message.delete()
    return HANDLE_PAYMENT


def handle_payment(update, context):
    moltin_client = context.bot_data['moltin_client']
    query = update.callback_query
    query.answer()
    cart_products, _ = moltin_client.get_cart_data(query.from_user.id)
    prices = []
    for product in cart_products:
        if product['quantity'] > 1:
            product['name'] += f' ({product["quantity"]} —à—Ç.)'
        product['total_cost'] = int(product['total_cost'].replace(' ‚ÇΩ', ''))
        prices.append(LabeledPrice(product['name'], product['total_cost'] * 100))
    if context.user_data['delivery_type'] != 'pickup':
        if context.user_data['delivery_type'] == 'free_delivery':
            delivery_cost = 0
        elif context.user_data['delivery_type'] == 'paid_delivery_1':
            delivery_cost = 100
        else:
            delivery_cost = 300
        prices.append(LabeledPrice('–î–æ—Å—Ç–∞–≤–∫–∞', delivery_cost * 100))
    context.bot.send_invoice(
        query.from_user.id,
        '–û–ø–ª–∞—Ç–∞ –ø–∏—Ü—Ü—ã',
        ' ',
        'pizzabot_payment',
        context.bot_data['payment_provider_token'],
        'RUB',
        prices
    )
    return HANDLE_PAYMENT


def handle_precheckout(update, context):
    query = update.pre_checkout_query
    if query.invoice_payload != 'pizzabot_payment':
        query.answer(ok=False, error_message='–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    else:
        query.answer(ok=True)
    return HANDLE_PAYMENT


def handle_successful_payment(update, context):
    moltin_client = context.bot_data['moltin_client']
    nearest_pizzeria = context.user_data['nearest_pizzeria']
    if context.user_data['delivery_type'] == 'pickup':
        message = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ñ–¥—ë–º –≤–∞—Å –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É {nearest_pizzeria["address"]}'
    else:
        message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ñ–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞.'
    keyboard = []
    keyboard.append([InlineKeyboardButton('üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='new_order')])
    update.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    deliveryman_telegram_id = moltin_client.get_deliveryman_telegram_id(nearest_pizzeria['id'])
    user_id = update.message.from_user.id
    cart_products, cart_cost = moltin_client.get_cart_data(user_id)
    customer_location = moltin_client.get_customer_location(user_id)
    context.bot.send_message(
        deliveryman_telegram_id,
        escape(get_cart_summary(cart_products, cart_cost)),
        parse_mode=PARSEMODE_MARKDOWN_V2
    )
    context.bot.send_location(
        deliveryman_telegram_id,
        longitude=customer_location['longitude'],
        latitude=customer_location['latitude']
    )
    moltin_client.empty_cart(user_id)
    context.job_queue.run_once(notify_after_delivery_expiration, 3600, context=user_id)
    return HANDLE_FINISH


def notify_after_delivery_expiration(context):
    message = '''\
        –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! *–º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã*

        *—Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø–∏—Ü—Ü–∞ –Ω–µ –ø—Ä–∏—à–ª–∞*
        '''
    context.bot.send_message(
        context.job.context,
        dedent(message)
    )


def main():
    load_dotenv()

    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    updater = Updater(
        os.getenv('TELEGRAM_TOKEN'),
        persistence=PicklePersistence(filename='conversationbot')
    )
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            HANDLE_MENU: [
                CallbackQueryHandler(show_cart, pattern='^cart$'),
                CallbackQueryHandler(show_menu, pattern='^page'),
                CallbackQueryHandler(show_product)
            ],
            HANDLE_CART: [
                CallbackQueryHandler(ask_for_address, pattern='^pay$'),
                CallbackQueryHandler(show_menu, pattern='^back$'),
                CallbackQueryHandler(show_cart)
            ],
            HANDLE_PRODUCT: [
                CallbackQueryHandler(show_cart, pattern='^cart$'),
                CallbackQueryHandler(show_menu, pattern='^back$'),
                CallbackQueryHandler(show_product)
            ],
            AWAIT_LOCATION: [
                MessageHandler(Filters.location, handle_location),
                MessageHandler(Filters.text & ~Filters.command, handle_address)
            ],
            HANDLE_DELIVERY: [
                CallbackQueryHandler(ask_for_address, pattern='^change_address$'),
                CallbackQueryHandler(handle_delivery)
            ],
            HANDLE_PAYMENT: [
                CallbackQueryHandler(handle_payment, pattern='^pay$'),
                MessageHandler(Filters.successful_payment, handle_successful_payment)
            ],
            HANDLE_FINISH: [
                CallbackQueryHandler(start, pattern='^new_order$')
            ],
        },
        fallbacks=[],
        name='pizzabot_conversation',
        persistent=True
    )

    dispatcher.bot_data['moltin_client'] = MoltinClient(
        os.getenv('MOLTIN_CLIENT_ID'),
        os.getenv('MOLTIN_CLIENT_SECRET')
    )
    dispatcher.bot_data['payment_provider_token'] = os.getenv('TELEGRAM_PAYMENT_PROVIDER_TOKEN')
    dispatcher.bot_data['yandex_geocoder_api_key'] = os.getenv('YANDEX_GEOCODER_API_KEY')
    dispatcher.bot_data['products_per_page'] = 5
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(PreCheckoutQueryHandler(handle_precheckout))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
